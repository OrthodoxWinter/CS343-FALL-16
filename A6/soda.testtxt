

Test Documentation
TEST 1:
RunCommand:
./soda soda.config 46671 1
Output:
Usage: ./soda [ config-file [ random-seed (> 0) ] ]
Analysis: Test Invalid number of parameters, should print usage msg
______________________________Seperate line_______________________________________________________________________________
TEST 2:
Run Command: 
 ./soda soda.config 46671 -1
 Output:
Usage: ./soda [ config-file [ random-seed (> 0) ] ]
Analysis: Test Invalid seed value, should print usage msg
______________________________Seperate line_______________________________________________________________________________
TEST 3
Run Command
./soda soda.config4 46671
Input:
SodaCost 2 # Manufacturer Suggested Retail Price (MSRP) per bottle
NumStudents 15 # number of students to create
MaxPurchases 0 # maximum number of bottles a student purchases
NumVendingMachines 4 # number of vending machines
MaxStockPerFlavour 5 # maximum number of bottles of each flavour in a vending machine
MaxShippedPerFlavour 3 # maximum number of bottles of each flavour generated by the bottling
# plant per production run
TimeBetweenShipments 3 # length of time between shipment pickup
GroupoffDelay 10 # length of time between new initializing gift cards
ParentalDelay 2 # length of time between new deposits of funds
NumCouriers 7 # maximum number of couriers in the pool
Output: 
Error: file "soda.config4" parameter MaxPurchases value 0 must be positive.
Analysis: Check invalid parameter values, should throw error
______________________________Seperate line_______________________________________________________________________________
TEST 4:
Run Command:./soda soda.config4 46671
Input:
SodaCost 1 # Manufacturer Suggested Retail Price (MSRP) per bottle
NumStudents 3 # number of students to create
MaxPurchases 3 # maximum number of bottles a student purchases
NumVendingMachines 4 # number of vending machines
MaxStockPerFlavour 5 # maximum number of bottles of each flavour in a vending machine
MaxShippedPerFlavour 3 # maximum number of bottles of each flavour generated by the bottling
# plant per production run
TimeBetweenShipments 3 # length of time between shipment pickup
GroupoffDelay 10 # length of time between new initializing gift cards
ParentalDelay 2 # length of time between new deposits of funds
NumCouriers 0 # maximum number of couriers in the pool
Output:
Error: file "soda.config4" parameter NumCouriers value 0 must be positive.
Analysis: Check invalid parameter values, should throw error
______________________________Seperate line_______________________________________________________________________________
TEST 5:
Run Command:./soda soda.config4 46671
Input:
SodaCost -1 # Manufacturer Suggested Retail Price (MSRP) per bottle
NumStudents 3 # number of students to create
MaxPurchases 3 # maximum number of bottles a student purchases
NumVendingMachines 4 # number of vending machines
MaxStockPerFlavour 5 # maximum number of bottles of each flavour in a vending machine
MaxShippedPerFlavour 3 # maximum number of bottles of each flavour generated by the bottling
# plant per production run
TimeBetweenShipments 3 # length of time between shipment pickup
GroupoffDelay 10 # length of time between new initializing gift cards
ParentalDelay 2 # length of time between new deposits of funds
NumCouriers 7 # maximum number of couriers in the pool
Output:
Error: file "soda.config4" parameter SodaCost value -1 must be positive.
Analysis: Check invalid parameter values, should throw error
______________________________Seperate line_______________________________________________________________________________
TEST 6:
Run Command:./soda soda.config4 46671
Input:: 
SodaCost 2 # Manufacturer Suggested Retail Price (MSRP) per bottle
NumStudents 1 # number of students to create
MaxPurchases 3 # maximum number of bottles a student purchases
NumVendingMachines 4 # number of vending machines
MaxStockPerFlavour 5 # maximum number of bottles of each flavour in a vending machine
MaxShippedPerFlavour 3 # maximum number of bottles of each flavour generated by the bottling
# plant per production run
TimeBetweenShipments 3 # length of time between shipment pickup
GroupoffDelay 10 # length of time between new initializing gift cards
ParentalDelay 2 # length of time between new deposits of funds
NumCouriers 7 # maximum number of couriers in the pool
Output:
Parent	Gropoff	WATOff	Names	Truck	Plant	Stud0	Mach0	Mach1	Mach2	Mach3	Cour0	Cour1	Cour2	Cour3	Cour4	Cour5	Cour6	
*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	
S	S	S	S			S3,1	S2				S	S	S	S	S	S	S	
			R0		S			S2	S2	S2								
		C0,5	R1	S	G10						t0,5							
			R2								T0,5							
			R3															
	D2		N0,0			V0												
...	F	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	
				P10	P													
				d0,10	G7		r											
				U0,10			R											
				D0,0		B3	B3,1											
...	...	...	...	...	...	F	...	...	...	...	...	...	...	...	...	...	...	
				P7	P													
				d1,7				r										
				U1,13				R										
				D1,0														
...	...	...	...	...	F	...	...	...	...	...	...	...	...	...	...	...	...	
...	...	...	...	...	...	...	F	...	...	...	...	...	...	...	...	...	...	
...	...	...	...	...	...	...	...	F	...	...	...	...	...	...	...	...	...	
...	...	...	...	...	...	...	...	...	F	...	...	...	...	...	...	...	...	
...	...	...	...	...	...	...	...	...	...	F	...	...	...	...	...	...	...	
...	...	...	F	...	...	...	...	...	...	...	...	...	...	...	...	...	...	
...	...	...	...	...	...	...	...	...	...	...	...	F	...	...	...	...	...	
...	...	...	...	...	...	...	...	...	...	...	...	...	F	...	...	...	...	
...	...	...	...	...	...	...	...	...	...	...	...	...	...	F	...	...	...	
...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	F	...	...	
...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	F	...	
...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	F	
...	...	...	...	...	...	...	...	...	...	...	F	...	...	...	...	...	...	
...	...	F	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	
F	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...
***********************

Analysis: Check what happen if only one student, it prints correctly and we can see lots of machine are idle
______________________________Seperate line_______________________________________________________________________________

TEST 7:
RunCommand:
 ./soda soda.config 3
Input:
SodaCost 2 # Manufacturer Suggested Retail Price (MSRP) per bottle
NumStudents 5 # number of students to create
MaxPurchases 4 # maximum number of bottles a student purchases
NumVendingMachines 3 # number of vending machines
MaxStockPerFlavour 5 # maximum number of bottles of each flavour in a vending machine
MaxShippedPerFlavour 3 # maximum number of bottles of each flavour generated by the bottling
# plant per production run
TimeBetweenShipments 3 # length of time between shipment pickup
GroupoffDelay 10 # length of time between new initializing gift cards
ParentalDelay 2 # length of time between new deposits of funds
NumCouriers 3 # maximum number of couriers in the pool
Output:
Parent	Gropoff	WATOff	Names	Truck	Plant	Stud0	Stud1	Stud2	Stud3	Stud4	Mach0	Mach1	Mach2	Cour0	Cour1	Cour2
*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	*******	
S	S	S	S								S2			S	S	S	
			R0			S3,1	S2,3	S1,5	S1,5	S1,4		S2					
			R1		S								S2				
		C0,5	R2	S	G8												
		C1,5															
		C2,5	N0,0			V0											
		C3,5	N1,1				V1										
		C4,5	N2,2	P8	P			V2									
			N3,0	d0,8	G6				V0		r			t0,5			
				U0,12							R						
				D0,0											t1,5		
			N4,1							V1					T1,5	t2,5	
			N1,2				V2								t3,5		
				P6	P										T3,5		
			N1,0	d1,6	G6		V0		B3		B1,2	r			t4,5	T2,5	
				U1,14								R					
	D2		N2,0	D1,0			B3	V0			B2,1						
				P6	P			B3			B1,1						
				d2,6	G5				B1		B1,0		r				
				U2,14									R				
			N2,1	D2,0				V1				B1,0					
				P5	P		B1	B1			B2,0						
	D2	T3,7		d0,5	G7						r			T0,5			
				U0,12							R						
		T2,7	N2,2	D0,0				V2									
		C3,5				B3			L		B3,3						
	D2	T1,7		P7	P		G0				B2,0					t2,7	
				d1,7	G11							r		t3,5			
				U1,8								R		T3,5			
				D1,0					B3		B1,0			t1,7			
										G0		B1,1		T1,7			
...	...	...	...	...	...	...	F	...	...	...	...	...	...	...	...	...	
	D2																
...	...	...	...	...	...	F	...	...	...	...	...	...	...	...	...	...	
				P11	P												
			N3,1	d2,11					V1			B1,0	r				
				U2,3	G9				B1				R				
				D2,0	P												
				P9													
				d0,9	G9						r						
				U0,7							R						
				D0,1													
				d1,1								r					
				U1,9								R					
	D2			D1,0													
...	F	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	
		T3,7	N3,2						V2								
		C3,5							L					t3,5			
				P9	P									T3,5			
				d2,9	G6								r				
				D2,6									R				
				d0,6					B3		r		B1,4		T4,5		
				U0,5							R						
				D0,4													
				d1,4								r					
				U1,8								R					
				D1,3													
...	...	...	...	...	...	...	...	...	F	...	...	...	...	...	...	...	
			N4,2							V2			B1,3				
				P6	P					B3							
				d2,6	G6								r				
				D2,4									R				
				d0,4						B1	r		B1,4				
				U0,4							R						
				D0,3													
				d1,3								r					
				U1,8								R					
		T4,7		D1,3	P												
				P6													
		C4,5		d2,6	G7					L			r				
				D2,5									R				
				d0,5							r				t4,5	T2,7	
				U0,2				B6			R		B1,4		T4,5		
				D0,3													
				d1,3						B3		r	B1,3				
				U1,8								R					
				D1,3				B4					B1,2				
...	...	...	...	...	...	...	...	...	...	F	...	...	...	...	...	...	
								B2					B1,1				
...	...	...	...	...	...	...	...	F	...	...	...	...	...	...	...	...	
				P7	P												
				d2,7									r				
				U2,1									R				
				D2,4													
				d0,4							r						
				U0,1							R						
				D0,3													
				d1,3								r					
				U1,8								R					
				D1,3													
...	...	...	...	...	F	...	...	...	...	...	...	...	...	...	...	...	
...	...	...	...	...	...	...	...	...	...	...	F	...	...	...	...	...	
...	...	...	...	...	...	...	...	...	...	...	...	F	...	...	...	...	
...	...	...	...	...	...	...	...	...	...	...	...	...	F	...	...	...	
...	...	...	F	...	...	...	...	...	...	...	...	...	...	...	...	...	
...	...	...	...	...	...	...	...	...	...	...	...	...	...	F	...	...	
...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	F	
...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	F	...	
...	...	F	...	...	...	...	...	...	...	...	...	...	...	...	...	...	
F	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	...	
***********************
Analysis:Test with the normal input, each objects prints and exits correctly, We can see cases that  watcard is lost , it will recreate from the above print log
______________________________Seperate line_______________________________________________________________________________
Test 8:
Input:
SodaCost 2 # Manufacturer Suggested Retail Price (MSRP) per bottle
NumStudents 12 # number of students to create
MaxPurchases 5 # maximum number of bottles a student purchases
NumVendingMachines 4 # number of vending machines
MaxStockPerFlavour 5 # maximum number of bottles of each flavour in a vending machine
MaxShippedPerFlavour 3 # maximum number of bottles of each flavour generated by the bottling
# plant per production run
TimeBetweenShipments 3 # length of time between shipment pickup
GroupoffDelay 10 # length of time between new initializing gift cards
ParentalDelay 2 # length of time between new deposits of funds
NumCouriers 7 # maximum number of couriers in the pool
Run Command:./soda soda.config4 46671
Output:
Omitted in the interest of space
Analysis: Test the case there are many students, we can see the vending machine is assigned correctly, and exception are handled correctly.
______________________________Seperate line_______________________________________________________________________________
TEST 9:

Input:
SodaCost 2 # Manufacturer Suggested Retail Price (MSRP) per bottle
NumStudents 50 # number of students to create
MaxPurchases 5 # maximum number of bottles a student purchases
NumVendingMachines 1 # number of vending machines
MaxStockPerFlavour 3 # maximum number of bottles of each flavour in a vending machine
MaxShippedPerFlavour 3 # maximum number of bottles of each flavour generated by the bottling
# plant per production run
TimeBetweenShipments 3 # length of time between shipment pickup
GroupoffDelay 10 # length of time between new initializing gift cards
ParentalDelay 2 # length of time between new deposits of funds
NumCouriers 20 # maximum number of couriers in the pool

Output:Omitted in the interest of space

Analysis: High contention of Vending Machines. Check that program terminate and output is reasonable in this scenario.
______________________________Seperate line_______________________________________________________________________________
TEST 10:

Input:
SodaCost 2 # Manufacturer Suggested Retail Price (MSRP) per bottle
NumStudents 1000 # number of students to create
MaxPurchases 30 # maximum number of bottles a student purchases
NumVendingMachines 30 # number of vending machines
MaxStockPerFlavour 10 # maximum number of bottles of each flavour in a vending machine
MaxShippedPerFlavour 100 # maximum number of bottles of each flavour generated by the bottling
# plant per production run
TimeBetweenShipments 3 # length of time between shipment pickup
GroupoffDelay 10 # length of time between new initializing gift cards
ParentalDelay 2 # length of time between new deposits of funds
NumCouriers 30 # maximum number of couriers in the pool

Output:Omitted in the interest of space

Analysis: Large amount of students. This is more or less meant to be an edge case/stress test. Only verified program terminated without error
______________________________Seperate line_______________________________________________________________________________
TEST 11:

Input:
SodaCost 2 # Manufacturer Suggested Retail Price (MSRP) per bottle
NumStudents 25 # number of students to create
MaxPurchases 1 # maximum number of bottles a student purchases
NumVendingMachines 10 # number of vending machines
MaxStockPerFlavour 10 # maximum number of bottles of each flavour in a vending machine
MaxShippedPerFlavour 5 # maximum number of bottles of each flavour generated by the bottling
# plant per production run
TimeBetweenShipments 3 # length of time between shipment pickup
GroupoffDelay 10 # length of time between new initializing gift cards
ParentalDelay 2 # length of time between new deposits of funds
NumCouriers 10 # maximum number of couriers in the pool

Output:Omitted in the interest of space

Analysis: Students only buy 1 soda. This is meant to test the case where they only buy 1 soda with giftcard. Verified that some students
do purchase with giftcard, and their output is reasonable and program terminates normally
______________________________Seperate line_______________________________________________________________________________
TEST 12

Input:
SodaCost 2 # Manufacturer Suggested Retail Price (MSRP) per bottle
NumStudents 100 # number of students to create
MaxPurchases 10 # maximum number of bottles a student purchases
NumVendingMachines 50 # number of vending machines
MaxStockPerFlavour 10 # maximum number of bottles of each flavour in a vending machine
MaxShippedPerFlavour 25 # maximum number of bottles of each flavour generated by the bottling
# plant per production run
TimeBetweenShipments 3 # length of time between shipment pickup
GroupoffDelay 10 # length of time between new initializing gift cards
ParentalDelay 2 # length of time between new deposits of funds
NumCouriers 1 # maximum number of couriers in the pool

Output:Omitted in the interest of space

Analysis: High contention for courier. Verified that program terminates normally and output is reasonable
______________________________Seperate line_______________________________________________________________________________
TEST 13

Input:
SodaCost 2 # Manufacturer Suggested Retail Price (MSRP) per bottle
NumStudents 10 # number of students to create
MaxPurchases 100 # maximum number of bottles a student purchases
NumVendingMachines 10 # number of vending machines
MaxStockPerFlavour 3 # maximum number of bottles of each flavour in a vending machine
MaxShippedPerFlavour 25 # maximum number of bottles of each flavour generated by the bottling
# plant per production run
TimeBetweenShipments 3 # length of time between shipment pickup
GroupoffDelay 10 # length of time between new initializing gift cards
ParentalDelay 2 # length of time between new deposits of funds
NumCouriers 5 # maximum number of couriers in the pool

Output:Omitted in the interest of space

Analysis: Students buying large number of soda. This is designed to test that bottling plant and truck
operate correctly over long period of time. Verified that program terminates normally and output is reasonable
______________________________Seperate line_______________________________________________________________________________
TEST 14

Input:
SodaCost 100 # Manufacturer Suggested Retail Price (MSRP) per bottle
NumStudents 10 # number of students to create
MaxPurchases 10 # maximum number of bottles a student purchases
NumVendingMachines 10 # number of vending machines
MaxStockPerFlavour 3 # maximum number of bottles of each flavour in a vending machine
MaxShippedPerFlavour 25 # maximum number of bottles of each flavour generated by the bottling
# plant per production run
TimeBetweenShipments 3 # length of time between shipment pickup
GroupoffDelay 10 # length of time between new initializing gift cards
ParentalDelay 2 # length of time between new deposits of funds
NumCouriers 5 # maximum number of couriers in the pool

Output:Omitted in the interest of space

Analysis: Very expensive soda. This is designed to test that students/groupoff transfer the correct amount.
Verified that program terminates normally and output is reasonable
______________________________Seperate line_______________________________________________________________________________
TEST 14

Input:
SodaCost 5 # Manufacturer Suggested Retail Price (MSRP) per bottle
NumStudents 10 # number of students to create
MaxPurchases 10 # maximum number of bottles a student purchases
NumVendingMachines 10 # number of vending machines
MaxStockPerFlavour 3 # maximum number of bottles of each flavour in a vending machine
MaxShippedPerFlavour 25 # maximum number of bottles of each flavour generated by the bottling
# plant per production run
TimeBetweenShipments 100 # length of time between shipment pickup
GroupoffDelay 10 # length of time between new initializing gift cards
ParentalDelay 2 # length of time between new deposits of funds
NumCouriers 5 # maximum number of couriers in the pool

Output:Omitted in the interest of space

Analysis: Very long delay between shipments. This is designed to test that students are indeed busy-waiting among the vending machines
Verified that program terminates normally and output is reasonable
______________________________Seperate line_______________________________________________________________________________
TEST 15

Input:
SodaCost 5 # Manufacturer Suggested Retail Price (MSRP) per bottle
NumStudents 10 # number of students to create
MaxPurchases 10 # maximum number of bottles a student purchases
NumVendingMachines 10 # number of vending machines
MaxStockPerFlavour 3 # maximum number of bottles of each flavour in a vending machine
MaxShippedPerFlavour 25 # maximum number of bottles of each flavour generated by the bottling
# plant per production run
TimeBetweenShipments 3 # length of time between shipment pickup
GroupoffDelay 100 # length of time between new initializing gift cards
ParentalDelay 100 # length of time between new deposits of funds
NumCouriers 5 # maximum number of couriers in the pool

Output:Omitted in the interest of space

Analysis: Very long groupoff and parent delay. This is designed to test that students are blocking correctly
Verified that program terminates normally and output is reasonable
______________________________Seperate line_______________________________________________________________________________
